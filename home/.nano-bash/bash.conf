PROMPT='\[\033[01;32m\]\u\[\033[01;34m\]::\[\033[01;31m\]\h \[\033[00;34m\]{ \[\033[01;34m\]\w \[\033[00;34m\]}\[\033[01;32m\]-> \[\033[00m\]'
PS1=${PROMPT}

[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*

# Less Colors for Man Pages
export LESS_TERMCAP_mb=$'\E[01;31m'       # begin blinking
export LESS_TERMCAP_md=$'\E[01;38;5;74m'  # begin bold
export LESS_TERMCAP_me=$'\E[0m'           # end mode
export LESS_TERMCAP_se=$'\E[0m'           # end standout-mode
export LESS_TERMCAP_so=$'\E[38;5;246m'    # begin standout-mode - info box
export LESS_TERMCAP_ue=$'\E[0m'           # end underline
export LESS_TERMCAP_us=$'\E[04;38;5;146m' # begin underline

RED="\[\033[0;31m\]"
YELLOW="\[\033[0;33m\]"
GREEN="\[\033[0;32m\]"
BLUE="\[\033[0;34m\]"
LIGHT_RED="\[\033[1;31m\]"
LIGHT_GREEN="\[\033[1;32m\]"
WHITE="\[\033[1;37m\]"
LIGHT_GRAY="\[\033[0;37m\]"
COLOR_NONE="\[\e[0m\]"

function parse_git_branch {
	git rev-parse --git-dir &> /dev/null
	git_status="$(git status 2> /dev/null)"
	branch_pattern="^# On branch ([^${IFS}]*)"
	detached_branch_pattern="# Not currently on any branch"
	remote_pattern="# Your branch is (.*) of"
	diverge_pattern="# Your branch and (.*) have diverged"

	if [[ ${git_status}} =~ "Changed but not updated" ]]; then
		state="${RED}⚡"
	fi
	# add an else if or two here if you want to get more specific
	if [[ ${git_status} =~ ${remote_pattern} ]]; then
		if [[ ${BASH_REMATCH[1]} == "ahead" ]]; then
			remote="${YELLOW}↑"
		else
			remote="${YELLOW}↓"
		fi
	fi

	if [[ ${git_status} =~ ${diverge_pattern} ]]; then
		remote="${YELLOW}↕"
	fi

	if [[ ${git_status} =~ ${branch_pattern} ]]; then
		branch=${BASH_REMATCH[1]}
	elif [[ ${git_status} =~ ${detached_branch_pattern} ]]; then
		branch="${YELLOW}NO BRANCH"
	fi

	if [[ ${#state} -gt "0" || ${#remote} -gt "0" ]]; then
		s=" "
	fi

	echo " ${branch}${s}${remote}${state}"
}

function prompt_func() {
	git rev-parse --git-dir > /dev/null 2>&1

	if [ $? -eq 0 ]; then
		prompt="${TITLEBAR}${BLUE}[${RED}\W${GREEN}$(parse_git_branch)${BLUE}]${COLOR_NONE} "
		PS1="${prompt}$ "
	else
		PS1=$PSAVE
	fi
}

export PSAVE=$PS1

PROMPT_COMMAND=prompt_func

### History - made right.
# history length
HISTSIZE=10000
HISTFILESIZE=10000

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:ignorespace

# setting up timestamp for history
HISTTIMEFORMAT="%F %T "

# Reverse History
function rh {
  history | awk '{a[$4]++}END{for(i in a){print a[i] " " i}}' | sort -rn | head
}

# append to the history file, don't overwrite it
shopt -s histappend
